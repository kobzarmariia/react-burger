{"version":3,"sources":["components/UI/Input/Input.js","shared/utitlity.js","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","state","controls","email","type","placeholder","validation","valid","password","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.3dc69fd2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.css';\n\nconst input = props => {\n\tlet inputElement = null;\n\tconst inputClasses = ['InputElement'];\n\n\tif (props.invalid && props.shouldValidate && props.touched) {\n\t\tinputClasses.push('Invalid');\n\t}\n\n\tswitch (props.elementType) {\n\t\tcase 'input':\n\t\t\tinputElement = (\n\t\t\t\t<input\n\t\t\t\t\tclassName={inputClasses.join(' ')}\n\t\t\t\t\t{...props.elementConfig}\n\t\t\t\t\tvalue={props.value}\n\t\t\t\t\tonChange={props.changed}\n\t\t\t\t/>\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'textarea':\n\t\t\tinputElement = (\n\t\t\t\t<textarea\n\t\t\t\t\tclassName={inputClasses.join(' ')}\n\t\t\t\t\t{...props.elementConfig}\n\t\t\t\t\tvalue={props.value}\n\t\t\t\t\tonChange={props.changed}\n\t\t\t\t/>\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'select':\n\t\t\tinputElement = (\n\t\t\t\t<select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\n\t\t\t\t\t{props.elementConfig.options.map(option => (\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\n\t\t\t\t\t\t\t{option.displayValue}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tinputElement = (\n\t\t\t\t<input\n\t\t\t\t\tclassName={inputClasses.join(' ')}\n\t\t\t\t\t{...props.elementConfig}\n\t\t\t\t\tvalue={props.value}\n\t\t\t\t\tonChange={props.changed}\n\t\t\t\t/>\n\t\t\t);\n\t}\n\n\treturn (\n\t\t<div className={'Input'}>\n\t\t\t<label className={'Label'}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n\t);\n};\n\nexport default input;\n","export const checkValidity = (value, rules) => {\n\tlet isValid = true;\n\tif (!rules) {\n\t\treturn true;\n\t}\n\n\tif (rules.required) {\n\t\tisValid = value.trim() !== '' && isValid;\n\t}\n\n\tif (rules.minLength) {\n\t\tisValid = value.length >= rules.minLength && isValid;\n\t}\n\n\tif (rules.maxLength) {\n\t\tisValid = value.length <= rules.maxLength && isValid;\n\t}\n\n\tif (rules.isEmail) {\n\t\tconst pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\t\tisValid = pattern.test(value) && isValid;\n\t}\n\n\tif (rules.isNumeric) {\n\t\tconst pattern = /^\\d+$/;\n\t\tisValid = pattern.test(value) && isValid;\n\t}\n\n\treturn isValid;\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport './Auth.css';\nimport * as actions from '../../actions';\nimport { checkValidity } from '../../shared/utitlity';\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n\t\t\temail: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tplaceholder: 'Mail Address',\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tplaceholder: 'Password',\n\t\t\t\t},\n\t\t\t\tvalue: '',\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t},\n\t\tisSignup: true,\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n\t\t\tthis.props.onSetAuthRedirectPath();\n\t\t}\n\t}\n\n\tinputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = {\n\t\t\t...this.state.controls,\n\t\t\t[controlName]: {\n\t\t\t\t...this.state.controls[controlName],\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n\t\t\t\ttouched: true,\n\t\t\t},\n\t\t};\n\t\tthis.setState({ controls: updatedControls });\n\t};\n\n\tsubmitHandler = event => {\n\t\tevent.preventDefault();\n\t\tthis.props.onAuth(\n\t\t\tthis.state.controls.email.value,\n\t\t\tthis.state.controls.password.value,\n\t\t\tthis.state.isSignup\n\t\t);\n\t};\n\n\tswitchAuthModeHandler = () => {\n\t\tthis.setState(prevState => {\n\t\t\treturn { isSignup: !prevState.isSignup };\n\t\t});\n\t};\n\n\trender() {\n\t\tconst formElementsArray = [];\n\t\tfor (let key in this.state.controls) {\n\t\t\tformElementsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.controls[key],\n\t\t\t});\n\t\t}\n\n\t\tlet form = formElementsArray.map(formElement => (\n\t\t\t<Input\n\t\t\t\tkey={formElement.id}\n\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\tvalue={formElement.config.value}\n\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\tchanged={event => this.inputChangedHandler(event, formElement.id)}\n\t\t\t/>\n\t\t));\n\n\t\tif (this.props.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\n\t\tlet errorMessage = null;\n\n\t\tif (this.props.error) {\n\t\t\terrorMessage = <p>{this.props.error.message}</p>;\n\t\t}\n\n\t\tlet authRedirect = null;\n\t\tif (this.props.isAuthenticated) {\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Auth\">\n\t\t\t\t{authRedirect}\n\t\t\t\t{errorMessage}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType=\"Success\">SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n\t\t\t\t\tSWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuthenticated: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath,\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\n\t};\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Auth);\n"],"sourceRoot":""}